name: .NET Core push on master branch

on:
  push:
    tags:
      - '**'

env:
  PROJECT_NAME: MarketplaceService
  DOCKER_ORGANIZATION: s652
  DOCKER_REPOSITORY: marketplace-service
  GKE_CLUSTER: s65-2
  GKE_ZONE: europe-west4-a
  GKE_NAMESPACE: s65-2

jobs:
  build:
    # The virtual machine that will be used on GitHub
    runs-on: ubuntu-18.04
    
    # Run the steps in a Docker container on the virtual machine
    container:
      image: mcr.microsoft.com/dotnet/core/sdk:3.1.201-bionic
    
    steps:
      # Checkout Git repository
      - uses: actions/checkout@v2

      # Decrypt the GPG encrypted config files
      - name: Decrypt the GPG encrypted config files
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.GPG_PASSPHRASE }} --output ./${{ env.PROJECT_NAME }}/appsettings.json --decrypt ./${{ env.PROJECT_NAME }}/appsettings.json.gpg

      # Install the dependencies needed for the project
      - name: Install dependencies
        run: dotnet restore
      
      # Build the project
      - name: Build
        run: dotnet build
      
      # Test the project
      - name: Test
        run: dotnet test
      
      # Publish the release build in the /release folder
      - name: Publish
        run: dotnet publish -c Release -o release
      
      # Upload the release folder, Dockerfile and Kubernetes artifacts to this GitHub workflow for use in the next job
      - name: Upload release artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-artifact
          path: ./release

      - name: Upload Dockerfile artifact
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile-artifact
          path: ./Dockerfile

      - name: Upload Kubernetes artifact
        uses: actions/upload-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube
  
  deliver:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      # Download artifacts from GitHub workflow to use in this job
      - name: Download release artifact
        uses: actions/download-artifact@v1
        with:
          name: release-artifact
          path: ./release
      
      - name: Download Dockerfile artifact
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-artifact
          path: .
      
      # Get the tag version 
      - name: Get tag version
        id: get_tag_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      
      # Deliver Docker image to DockerHub
      - name: Deliver Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker build -t ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.get_tag_version.outputs.VERSION }} .
          docker push ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.get_tag_version.outputs.VERSION }}
  
  deploy:
    needs: deliver
    runs-on: ubuntu-18.04
    steps:
      - name: Download Kubernetes artifact
        uses: actions/download-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube
      
      # Get the tag version 
      - name: Get tag version
        id: get_tag_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      # Setup connection with the gcloud CLI
      - name: Setup gcloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}

      # Get GKE cluster credentials
      - name: Get GKE cluster credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

      # Deploy to GKE cluster
      - name: Deploy to GKE clusters
        run: |
          kubectl apply \
            -f ./kube/autoscaler.yaml \
            -f ./kube/deployment.yaml \
            -f ./kube/service.yaml
          kubectl set image Deployment/${{ env.DOCKER_REPOSITORY }} --namespace ${{ env.GKE_NAMESPACE }} ${{ env.DOCKER_REPOSITORY }}=${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.get_tag_version.outputs.VERSION }}
          kubectl rollout status Deployment/${{ env.DOCKER_REPOSITORY }} --namespace ${{ env.GKE_NAMESPACE }}
          kubectl get services -o wide